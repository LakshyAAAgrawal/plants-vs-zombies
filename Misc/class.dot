ClassDiagram [frame=true framecolor=steelblue label="Plants vs. Zombies"] {
  class Exception{
  	public Exception()
    public getMessage(): String
  }
  class ZombieReachedException extends Exception{
  	private laneNo: int
    public ZombieReachedException(a: int)
  }
  class GameSaveException extends Exception{
  	public GameSaveException(game:Game)
  }
  class GameLostException extends Exception{
  	public pointsWon: int
    public GameLostException(x:int)
    public getMessage(): String
  }
  interface Serializable{}
  class NoDefaultUserException extends Exception{
  	public NoDefaultUserException()
  }
  class PlayerProfile implements Serializable{
  	private final username : String "{readOnly}"
    private maxLevelReached : int
    public PlayerProfile(name:String) : void
    public getName() : String
    public getMaxLevelReached(): int
  }
  class Main{
  	private PvZ : GameManager
    public run()
  }
  class Grid implements Serializable{
  	private tiles : ArrayList "of tiles"
    private lawnMowers: ArrayList
    public getTile(x:int, y:int): Tile
    public getLane(laneNo:int): ArrayList
    public Grid()
  }
  class GameState implements Serializable{
  	private points: int
    private currLevel: int
    private listOfZombies: ArrayList
    private gameGrid: Grid
    public GameState(level:int)
    public executeFrame(): void
    public spawnSun(): void
    private addPoints(): void
    public createNewPlant(x:int, y:int, pointsDeduct:int): void
    private removePoints(x:int)
    private runLawnMower(x:int)
    public shovelPlant(x:int, y:int)
  }
  abstract class Character implements Serializable{
    protected HP: int
    protected attackPower: int
  }
  interface PlantTimer{
  	public static isPlantAvailable(int, int): boolean
    public static timeLeft(time:int): int
  }
  class PeaShooter extends Plant implements PlantTimer{
  	public static timeLastCreated: int
  }
  class WallNut extends Plant implements PlantTimer{
  	public static timeLastCreated: int
  }
  class CherryBomb extends Plant implements PlantTimer{
  	public static timeLastCreated: int
  }
  class Repeater extends Plant implements PlantTimer{
  	public static timeLastCreated: int
  }
  class Tripeater extends Plant implements PlantTimer{
  	public static timeLastCreated: int
  }
  class Sunflower extends Plant implements PlantTimer{
  	public static timeLastCreated: int
    public isSunAvailable(): boolean
  }
  
  abstract class Plant extends Character{
    protected tokenCost: int "{readonly}"
    protected timeCost: int	"{readonly}"
    public attack(zombie:Zombie): int
  }
  abstract class Zombie extends Character{
    protected laneNumber: int
    protected currX: int
    protected movePerFrame: int
    public move(lane:ArrayList): void
    public attack(plant:Plant): int
  }
  class BasicZombie extends Zombie{
  	public BasicZombie()
  }
  class ConeHeadZombie extends Zombie{
  	public ConeHeadZombie()
  }
  class BucketHeadZombie extends Zombie{
  	public BucketHeadZombie()
  }
  class FlagZombie extends Zombie{
  	public FlagZombie()
  }
  class Tile implements Serializable{
    private currPlant: Plant
    private currListOfZombies: ArrayList
    public addZombie(zombie:Zombie): void
    public removeZombie(zombie:Zombie): void
    public removeAllZombie(): void
    public addPlant(plant:Plant): void
    public removePlant(plant:Plant): void
    public hasPlant(): boolean
  }
  class GameManager{
    private currentPlayer: PlayerProfile
    private gameState: GameState
    private registeredUsers : HashMap
    public loadUser(): void
  	public loadUser(username:String): void
    private createNewUser() : PlayerProfile
    public startGame(): void
    public startNewGame(): void
    public resumeGame(): void
    public listOfSavedGames(): ArrayList
    public isResumeAvailable(): boolean
    public exitGame()
    public saveGame(game:GameState)
  }
  GameState -r-> GameSaveException [label="<<throws>>"]
  GameState -r-> GameLostException [label="<<throws>>"]
  Zombie -r-> ZombieReachedException [label="<<throws>>"]
  Plant -r-> Zombie [label="<<depends>>"]
  Zombie -r-> Plant [label="<<depends>>"]
 	Tile -g-> Plant [label="<<knows>>"]
  GameSaveException -g-> GameState [label="<<knows>>"]
  Tile -g-> Zombie [label="1         <<knows>>      *"]
  Grid -c-> Tile [label="1               *"]
  Main <-c- GameManager [label="1               1"]
  GameManager <-c- PlayerProfile
  GameManager <-c- GameState
  GameManager -r-> NoDefaultUserException [label="<<throws>>"]
}
